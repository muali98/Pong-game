/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xgpio.h"
#include "xparameters.h"
#include "xil_printf.h"
#include <unistd.h>  // For usleep

// Define GPIO device ID
#define GPIO_SCORE_DEVICE_ID XPAR_GPIO_2_DEVICE_ID

// Declare GPIO instance
XGpio Gpio_Score;

// Initial scores
int score1 = 0; // Score1 starts at 0
int score2 = 99; // Score2 starts at 99

// Function to update the score on the GPIO
void update_scores_to_gpio() {
    // Pack the scores into a 32-bit value
    u32 combined_scores = (score1 & 0xFFFF) | ((score2 & 0xFFFF) << 16);

    // Write the combined score to GPIO (score1 in the first 16 bits, score2 in the last 16 bits)
    XGpio_DiscreteWrite(&Gpio_Score, 1, combined_scores);
}

int main() {
    init_platform();

    // Initialize the GPIO for scores
    int status = XGpio_Initialize(&Gpio_Score, GPIO_SCORE_DEVICE_ID);
    if (status != XST_SUCCESS) {
        xil_printf("GPIO Initialization Failed\n");
        return XST_FAILURE;
    }

    // Set the GPIO direction to output (for score display)
    XGpio_SetDataDirection(&Gpio_Score, 1, 0x00);  // 32-bit output

    while (1) {
        // Increment score1, decrement score2
        if (score1 < 99) {
            score1++;
        }
        if (score2 > 0) {
            score2--;
        }

        // Update the GPIO with the new scores
        update_scores_to_gpio();

        // Print the current scores for debugging
        xil_printf("Score1: %d, Score2: %d\n", score1, score2);

        // Wait for 1 second (or any interval suitable for your testing)
        usleep(1000000);  // 1 second delay
    }

    cleanup_platform();
    return 0;
}
