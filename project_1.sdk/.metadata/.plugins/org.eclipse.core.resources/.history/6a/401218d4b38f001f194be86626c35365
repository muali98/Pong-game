/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include "xgpio.h"
#include "xparameters.h"

// GPIO device IDs (replace with actual values from your hardware design)
#define GPIO_PADDLE_RIGHT_ID  XPAR_GPIO_0_DEVICE_ID
#define GPIO_PADDLE_LEFT_ID   XPAR_GPIO_1_DEVICE_ID
#define GPIO_SCORE_ID         XPAR_GPIO_2_DEVICE_ID

XGpio Gpio_Paddle_Right, Gpio_Paddle_Left, Gpio_Score;

int main() {
    int status;
    u32 input_paddle_right, input_paddle_left;
    u32 score1, score2;
    u32 combined_score;

    // Initialize GPIO for the right paddle (gpio0)
    status = XGpio_Initialize(&Gpio_Paddle_Right, GPIO_PADDLE_RIGHT_ID);
    if (status != XST_SUCCESS) {
        return XST_FAILURE;
    }

    // Initialize GPIO for the left paddle (gpio1)
    status = XGpio_Initialize(&Gpio_Paddle_Left, GPIO_PADDLE_LEFT_ID);
    if (status != XST_SUCCESS) {
        return XST_FAILURE;
    }

    // Initialize GPIO for the score output (gpio2)
    status = XGpio_Initialize(&Gpio_Score, GPIO_SCORE_ID);
    if (status != XST_SUCCESS) {
        return XST_FAILURE;
    }

    // Set direction for gpio0 (right paddle) and gpio1 (left paddle) as input
    XGpio_SetDataDirection(&Gpio_Paddle_Right, 1, 0xFFFFFFFF);  // Input
    XGpio_SetDataDirection(&Gpio_Paddle_Left, 1, 0xFFFFFFFF);   // Input

    // Set direction for gpio2 (score) as output
    XGpio_SetDataDirection(&Gpio_Score, 1, 0x00000000);  // Output

    while (1) {
        // Read the paddle positions
        input_paddle_right = XGpio_DiscreteRead(&Gpio_Paddle_Right, 1);
        input_paddle_left = XGpio_DiscreteRead(&Gpio_Paddle_Left, 1);

        // Calculate scores based on paddle positions
        // For simplicity, let's assume the paddle position is the score itself
        score1 = input_paddle_left;   // Left paddle score
        score2 = input_paddle_right;  // Right paddle score

        // Combine the scores into a single 32-bit output
        // First 16 bits for score1 (left paddle), last 16 bits for score2 (right paddle)
        combined_score = ((score1 & 0xFFFF) << 16) | (score2 & 0xFFFF);

        // Write the combined score to the 7-segment display (gpio2)
        XGpio_DiscreteWrite(&Gpio_Score, 1, combined_score);
    }

    return 0;
}
