/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xgpio.h"
#include "xparameters.h"
#include "xil_printf.h"
#include <unistd.h>

// Define the GPIO device IDs
#define GPIO_BALL_ID XPAR_GPIO_3_DEVICE_ID  // GPIO3: Ball position x (first 16 bits), y (last 16 bits)
#define GPIO_PADDLE_ID XPAR_GPIO_4_DEVICE_ID  // GPIO4: Left paddle (first 16 bits), right paddle (last 16 bits)

// Declare GPIO instances
XGpio ball_gpio;
XGpio paddle_gpio;

int main() {
    init_platform();

    // Initialize GPIOs
    XGpio_Initialize(&ball_gpio, GPIO_BALL_ID);  // GPIO3 for ball (x, y)
    XGpio_Initialize(&paddle_gpio, GPIO_PADDLE_ID);  // GPIO4 for paddles (left, right)

    // Set both GPIOs as output
    XGpio_SetDataDirection(&ball_gpio, 1, 0x00);  // Output for ball (x, y)
    XGpio_SetDataDirection(&paddle_gpio, 1, 0x00);  // Output for paddles (left, right)

    // Test loop to output values
    int ball_x = 0;
    int ball_y = 0;
    int left_paddle_y = 210;  // Start with the paddle at center
    int right_paddle_y = 210;  // Start with the paddle at center

    while (1) {
        // Increment ball positions (example movement)
        ball_x = (ball_x + 5) % 640;  // Ball moves within the range of 0-640 for x-axis
        ball_y = (ball_y + 3) % 480;  // Ball moves within the range of 0-480 for y-axis

        // Simulate paddles moving
        left_paddle_y = (left_paddle_y + 2) % 420;  // Left paddle moves within 0-420
        right_paddle_y = (right_paddle_y + 2) % 420;  // Right paddle moves within 0-420

        // Combine ball_x and ball_y into a single 32-bit value
        uint32_t ball_value = ((ball_x & 0xFFFF) << 16) | (ball_y & 0xFFFF);

        // Combine left_paddle_y and right_paddle_y into a single 32-bit value
        uint32_t paddle_value = ((left_paddle_y & 0xFFFF) << 16) | (right_paddle_y & 0xFFFF);

        // Write the values to the respective GPIOs
        XGpio_DiscreteWrite(&ball_gpio, 1, ball_value);
        XGpio_DiscreteWrite(&paddle_gpio, 1, paddle_value);

        // Delay for simulation purposes (adjust as needed)
        usleep(100000);  // 100 ms delay
    }

    cleanup_platform();
    return 0;
}

